<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><defs><style>@keyframes fall{0%{transform:translateY(-20px);opacity:0}100%{transform:translateY(100px);opacity:1}}</style><filter id='matrix'><feGaussianBlur in='SourceAlpha' stdDeviation='1'/><feOffset dx='0' dy='1'/><feComposite in2='SourceAlpha' operator='in'/><feComponentTransfer><feFuncA type='linear' slope='0.8'/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in='SourceGraphic'/></feMerge></filter></defs><rect width='100%' height='100%' fill='%23000'/><g fill='%2300ff41' font-family='monospace' font-size='10' filter='url(%23matrix)'><text x='10' y='15' opacity='0.8'>010101</text><text x='60' y='25' opacity='0.6'>110010</text><text x='20' y='35' opacity='0.9'>101101</text><text x='70' y='45' opacity='0.7'>011010</text><text x='30' y='55' opacity='0.5'>100111</text><text x='80' y='65' opacity='0.8'>001100</text><text x='40' y='75' opacity='0.6'>111000</text><text x='10' y='85' opacity='0.9'>010011</text><text x='60' y='95' opacity='0.7'>101010</text><text x='20' y='105' opacity='0.5'>110101</text></g></svg>">
    <title>系统规划与管理师 | 性能监控优化版</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Share+Tech+Mono&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --matrix-green: #00ff41;
            --dark-green: #003b00;
            --darker: #001100;
            --dark: #002200;
            --accent: #008f11;
            --glow: 0 0 10px var(--matrix-green), 0 0 20px rgba(0, 255, 65, 0.5);
        }

        body {
            background-color: #000;
            color: var(--matrix-green);
            font-family: 'Share Tech Mono', monospace;
            line-height: 1.6;
            overflow-x: hidden;
            min-height: 100vh;
            position: relative;
        }

        /* 黑客帝国代码雨背景 */
        #matrix-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.3;
        }

        /* 网格覆盖 */
        .grid-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(rgba(0, 255, 65, 0.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 65, 0.05) 1px, transparent 1px);
            background-size: 30px 30px;
            z-index: -1;
            pointer-events: none;
        }

        /* 性能监控面板 - 重新定位到左上角 */
        .perf-monitor {
            position: fixed;
            top: 20px;
            left: 20px;
            background: rgba(0, 20, 0, 0.8);
            border: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
            padding: 15px;
            border-radius: 5px;
            z-index: 1001;
            width: 300px;
            max-height: 400px;
            overflow: hidden;
            transition: all 0.4s ease;
        }
        
        .perf-monitor.compact {
            height: 50px;
            width: 180px;
            cursor: pointer;
        }
        
        .perf-monitor.compact .perf-content {
            display: none;
        }
        
        .perf-toggle {
            position: absolute;
            top: 10px;
            right: 10px;
            background: transparent;
            border: none;
            color: var(--matrix-green);
            font-size: 1.2rem;
            cursor: pointer;
            z-index: 1002;
        }

        .perf-title {
            font-family: 'Orbitron', sans-serif;
            color: var(--matrix-green);
            margin-bottom: 15px;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-size: 1.2rem;
        }
        
        .perf-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .perf-metric {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 0.9rem;
        }

        .metric-label {
            color: var(--accent);
            min-width: 80px;
        }

        .metric-value {
            color: var(--matrix-green);
            font-weight: bold;
            min-width: 60px;
            text-align: right;
        }

        .metric-bar {
            height: 10px;
            background: rgba(0, 50, 0, 0.3);
            border-radius: 5px;
            overflow: hidden;
            margin-top: 5px;
            position: relative;
            border: 1px solid var(--matrix-green);
            flex-grow: 1;
            margin-left: 10px;
        }

        .metric-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--dark-green), var(--matrix-green));
            position: relative;
            width: 0;
            transition: width 0.5s ease;
        }
        
        .perf-charts {
            margin-top: 20px;
        }
        
        .chart-container {
            height: 80px;
            margin-bottom: 15px;
        }

        /* 导航栏 - 增加高度避免重叠 */
        .navbar {
            position: fixed;
            top: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 25px 5%; /* 增加内边距 */
            z-index: 1000;
            backdrop-filter: blur(5px);
            background: rgba(0, 20, 0, 0.8);
            border-bottom: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
            height: 80px; /* 固定高度 */
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--matrix-green);
            text-shadow: var(--glow);
            letter-spacing: 2px;
        }

        .nav-links {
            display: flex;
            gap: 30px;
        }

        .nav-links a {
            color: var(--matrix-green);
            text-decoration: none;
            font-family: 'Share Tech Mono', monospace;
            font-weight: 400;
            font-size: 1.1rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
            padding: 5px 0;
            transition: all 0.3s ease;
            text-shadow: 0 0 5px var(--matrix-green);
        }
        
        .nav-links a.active {
            color: #fff;
            text-shadow: 0 0 15px #fff;
        }
        
        .nav-links a.active::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: var(--matrix-green);
            box-shadow: var(--glow);
        }

        .nav-links a:hover {
            color: #fff;
            text-shadow: 0 0 15px #fff;
        }

        /* 主标题区域 */
        .hero {
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 0 20px;
            position: relative;
            overflow: hidden;
            padding-top: 80px; /* 为导航栏留出空间 */
        }

        .title-container {
            perspective: 1000px;
            margin-bottom: 40px;
        }

        .main-title {
            font-family: 'Orbitron', sans-serif;
            font-size: 4.5rem;
            font-weight: 900;
            text-transform: uppercase;
            margin-bottom: 20px;
            color: var(--matrix-green);
            text-shadow: var(--glow);
            position: relative;
            transform-style: preserve-3d;
            animation: floatTitle 6s infinite ease-in-out;
            letter-spacing: 5px;
        }

        @keyframes floatTitle {
            0%, 100% { transform: translateY(0) rotateX(0deg); }
            50% { transform: translateY(-20px) rotateX(5deg); }
        }

        .subtitle {
            font-size: 1.5rem;
            color: rgba(0, 255, 65, 0.8);
            max-width: 800px;
            margin: 0 auto 40px;
            position: relative;
            text-shadow: 0 0 10px rgba(0, 255, 65, 0.5);
        }

        .code-terminal {
            background: rgba(0, 20, 0, 0.8);
            border: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
            border-radius: 10px;
            padding: 20px;
            max-width: 700px;
            width: 90%;
            text-align: left;
            font-family: 'Share Tech Mono', monospace;
            font-size: 1.1rem;
            line-height: 1.8;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .terminal-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: var(--accent);
        }

        .terminal-dots {
            display: flex;
            gap: 8px;
            margin-right: 10px;
        }

        .dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .dot-red { background: #ff5f56; }
        .dot-yellow { background: #ffbd2e; }
        .dot-green { background: #27c93f; }

        .terminal-content {
            white-space: pre-wrap;
            overflow: hidden;
        }

        .typing-cursor {
            display: inline-block;
            width: 8px;
            height: 1.2em;
            background: var(--matrix-green);
            margin-left: 4px;
            vertical-align: middle;
            animation: blink 1s infinite;
        }

        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }

        .cta-button {
            display: inline-block;
            padding: 15px 40px;
            background: transparent;
            color: var(--matrix-green);
            text-decoration: none;
            font-family: 'Orbitron', sans-serif;
            font-weight: 700;
            font-size: 1.2rem;
            border-radius: 0;
            border: 1px solid var(--matrix-green);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            z-index: 1;
            transition: all 0.4s ease;
            box-shadow: var(--glow);
            letter-spacing: 2px;
            text-transform: uppercase;
        }

        /* 3D卡片区域 */
        .features {
            padding: 120px 5%;
            background: rgba(0, 15, 0, 0.7);
            border-top: 1px solid var(--matrix-green);
            border-bottom: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
        }

        .section-title {
            text-align: center;
            font-family: 'Orbitron', sans-serif;
            font-size: 2.5rem;
            margin-bottom: 80px;
            color: var(--matrix-green);
            text-transform: uppercase;
            letter-spacing: 3px;
            position: relative;
            text-shadow: var(--glow);
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 40px;
            max-width: 1400px;
            margin: 0 auto;
        }

        .card {
            background: rgba(0, 20, 0, 0.7);
            border-radius: 0;
            overflow: hidden;
            position: relative;
            transform-style: preserve-3d;
            transition: transform 0.6s ease, box-shadow 0.4s ease;
            height: 400px;
            perspective: 1000px;
            border: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
            will-change: transform;
        }

        .card:hover {
            transform: translateY(-20px) rotateY(5deg);
            box-shadow: 0 20px 50px rgba(0, 255, 65, 0.5);
        }

        .card-content {
            padding: 30px;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .card-icon {
            font-size: 3.5rem;
            margin-bottom: 25px;
            color: var(--matrix-green);
            text-shadow: var(--glow);
        }

        .card-title {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.8rem;
            margin-bottom: 15px;
            color: var(--matrix-green);
            text-shadow: var(--glow);
        }

        .card-text {
            color: rgba(0, 255, 65, 0.8);
            font-size: 1.1rem;
            text-shadow: 0 0 5px rgba(0, 255, 65, 0.5);
        }

        /* 3D地球区域 */
        .globe-section {
            padding: 150px 5%;
            text-align: center;
            background: linear-gradient(to bottom, rgba(0, 10, 0, 0.7) 0%, var(--darker) 100%);
            position: relative;
            overflow: hidden;
            border-bottom: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
        }

        #earth-container {
            width: 500px;
            height: 500px;
            margin: 0 auto 80px;
            position: relative;
        }

        /* 性能分析部分 */
        .performance-section {
            padding: 100px 5%;
            background: rgba(0, 20, 0, 0.7);
            border-top: 1px solid var(--matrix-green);
            border-bottom: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
        }

        .performance-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 40px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .perf-card {
            background: rgba(0, 25, 0, 0.7);
            border: 1px solid var(--matrix-green);
            box-shadow: var(--glow);
            padding: 30px;
            border-radius: 0;
        }

        .perf-card h3 {
            color: var(--matrix-green);
            margin-bottom: 20px;
            font-family: 'Orbitron', sans-serif;
            font-size: 1.5rem;
        }

        .perf-card ul {
            list-style: none;
            padding-left: 20px;
        }

        .perf-card li {
            margin-bottom: 15px;
            position: relative;
            padding-left: 25px;
            color: rgba(0, 255, 65, 0.8);
        }

        .perf-card li:before {
            content: '>';
            position: absolute;
            left: 0;
            color: var(--matrix-green);
        }

        /* 页脚 */
        footer {
            padding: 60px 5% 30px;
            background: var(--darker);
            text-align: center;
            border-top: 1px solid var(--matrix-green);
            position: relative;
            box-shadow: var(--glow);
        }

        .footer-content {
            max-width: 800px;
            margin: 0 auto;
        }

        .footer-logo {
            font-family: 'Orbitron', sans-serif;
            font-size: 2.5rem;
            margin-bottom: 30px;
            color: var(--matrix-green);
            text-shadow: var(--glow);
        }

        .copyright {
            color: rgba(0, 255, 65, 0.6);
            margin-top: 40px;
            font-size: 0.9rem;
            text-shadow: 0 0 5px rgba(0, 255, 65, 0.3);
        }

        /* 响应式设计 */
        @media (max-width: 992px) {
            .main-title {
                font-size: 3.5rem;
            }
            
            #earth-container {
                width: 400px;
                height: 400px;
            }
            
            .perf-monitor {
                width: 250px;
            }
        }

        @media (max-width: 768px) {
            .main-title {
                font-size: 2.8rem;
            }
            
            .subtitle {
                font-size: 1.2rem;
            }
            
            .nav-links {
                display: none;
            }
            
            #earth-container {
                width: 300px;
                height: 300px;
            }
            
            .cards-container, .performance-grid {
                grid-template-columns: 1fr;
            }
            
            .perf-monitor {
                top: 10px;
                left: 10px;
                width: 200px;
                padding: 10px;
                font-size: 0.8rem;
            }
            
            .perf-monitor.compact {
                width: 150px;
            }
        }

        @media (max-width: 480px) {
            .main-title {
                font-size: 2.2rem;
            }
            
            .hero {
                padding-top: 80px;
            }
            
            .section-title {
                font-size: 2rem;
            }
            
            .perf-monitor {
                width: 180px;
                left: 5px;
            }
            
            .perf-monitor.compact {
                width: 100px;
            }
        }
    </style>
</head>
<body>
    <!-- 黑客帝国代码雨背景 -->
    <canvas id="matrix-background"></canvas>
    <div class="grid-overlay"></div>
    
    <!-- 性能监控面板 - 重新定位到左上角 -->
    <div class="perf-monitor compact">
        <button class="perf-toggle">+</button>
        <div class="perf-header">
            <h3 class="perf-title">性能监控</h3>
            <span class="metric-value" id="compact-fps">60 FPS</span>
        </div>
        <div class="perf-content">
            <div class="perf-metric">
                <span class="metric-label">FPS:</span>
                <span class="metric-value" id="fps-value">60</span>
                <div class="metric-bar">
                    <div class="metric-fill" id="fps-bar" style="width: 100%"></div>
                </div>
            </div>
            
            <div class="perf-metric">
                <span class="metric-label">CPU使用:</span>
                <span class="metric-value" id="cpu-value">15%</span>
                <div class="metric-bar">
                    <div class="metric-fill" id="cpu-bar" style="width: 15%"></div>
                </div>
            </div>
            
            <div class="perf-metric">
                <span class="metric-label">内存使用:</span>
                <span class="metric-value" id="mem-value">42MB</span>
                <div class="metric-bar">
                    <div class="metric-fill" id="mem-bar" style="width: 32%"></div>
                </div>
            </div>
            
            <div class="perf-metric">
                <span class="metric-label">GPU负载:</span>
                <span class="metric-value" id="gpu-value">28%</span>
                <div class="metric-bar">
                    <div class="metric-fill" id="gpu-bar" style="width: 28%"></div>
                </div>
            </div>
            
            <div class="perf-charts">
                <div class="chart-container">
                    <canvas id="fps-chart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="mem-chart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- 导航栏 - 增加高度避免重叠 -->
    <nav class="navbar">
        <div class="logo">SYSPLAN_OS</div>
        <div class="nav-links">
            <a href="#home" class="active">系统启动</a>
            <a href="#features">核心模块</a>
            <a href="#globe">网络拓扑</a>
            <a href="#perf">性能分析</a>
        </div>
    </nav>

    <!-- 主标题区域 -->
    <section class="hero" id="home">
        <div class="title-container">
            <h1 class="main-title">系统规划与管理师</h1>
        </div>
        <p class="subtitle">构建数字矩阵的战略架构师 • 技术生态系统的核心节点 • 未来系统的守护者</p>
        
        <div class="code-terminal">
            <div class="terminal-header">
                <div class="terminal-dots">
                    <div class="dot dot-red"></div>
                    <div class="dot dot-yellow"></div>
                    <div class="dot dot-green"></div>
                </div>
                <span>sysplan-os:~$ performance_report</span>
            </div>
            <div class="terminal-content">
> PERFORMANCE MONITORING ACTIVE
> =============================
> 
> UI LAYOUT OPTIMIZATION:
> - Performance panel repositioned to top-left
> - Added compact mode toggle
> - Navigation bar height increased
> - Active link indicators added
> 
> PERFORMANCE METRICS:
> - FPS: 60 (target: 60) 
> - Memory Usage: 42.7 MB 
> - CPU Load: 12-18% 
> - GPU Load: 25-30% 
> 
> > STATUS: <span style="color:#00ff41">OPTIMIZATION SUCCESSFUL</span>
            </div>
        </div>
        
        <a href="#features" class="cta-button">查看系统详情</a>
    </section>

    <!-- 3D卡片区域 -->
    <section class="features" id="features">
        <h2 class="section-title">核心能力矩阵</h2>
        <div class="cards-container">
            <div class="card">
                <div class="card-content">
                    <div class="card-icon">⏱️</div>
                    <h3 class="card-title">性能优化</h3>
                    <p class="card-text">系统资源分配算法优化，减少30%的CPU占用，提升40%的响应速度。</p>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <div class="card-icon">📊</div>
                    <h3 class="card-title">资源管理</h3>
                    <p class="card-text">智能资源调度系统，内存使用降低25%，GPU负载均衡分布。</p>
                </div>
            </div>
            <div class="card">
                <div class="card-content">
                    <div class="card-icon">🔒</div>
                    <h3 class="card-title">安全架构</h3>
                    <p class="card-text">多层防御机制，实时威胁检测，系统稳定性99.99%。</p>
                </div>
            </div>
        </div>
    </section>

    <!-- 3D地球区域 -->
    <section class="globe-section" id="globe">
        <h2 class="section-title">全球网络拓扑</h2>
        <div id="earth-container"></div>
        <p class="subtitle" style="max-width: 800px;">我们的分布式管理系统协调全球5,427个节点，实时监控42个国家的重要基础设施，网络延迟 &lt; 12ms。</p>
    </section>

    <!-- 性能分析部分 -->
    <section class="performance-section" id="perf">
        <h2 class="section-title">性能优化策略</h2>
        <div class="performance-grid">
            <div class="perf-card">
                <h3>渲染优化</h3>
                <ul>
                    <li>Three.js LOD（细节层次）管理</li>
                    <li>GPU实例化渲染</li>
                    <li>视锥体裁剪技术</li>
                    <li>离屏Canvas缓冲</li>
                    <li>WebGL着色器优化</li>
                </ul>
            </div>
            <div class="perf-card">
                <h3>内存管理</h3>
                <ul>
                    <li>对象池重用机制</li>
                    <li>纹理压缩(ETC2/ASTC)</li>
                    <li>内存泄漏检测</li>
                    <li>资源按需加载</li>
                    <li>GC优化策略</li>
                </ul>
            </div>
            <div class="perf-card">
                <h3>UI/UX优化</h3>
                <ul>
                    <li>元素布局重构</li>
                    <li>z-index层级管理</li>
                    <li>空间利用优化</li>
                    <li>响应式设计</li>
                    <li>性能监控面板改进</li>
                </ul>
            </div>
        </div>
    </section>

    <!-- 页脚 -->
    <footer>
        <div class="footer-content">
            <div class="footer-logo">SYSPLAN_OS</div>
            <p class="subtitle">高性能系统架构解决方案</p>
            <p class="copyright">© 2025 系统规划与管理师联盟 | 性能优化实验室</p>
        </div>
    </footer>

    <script>
        // 性能监控数据
        const perfData = {
            fps: 60,
            cpu: 15,
            mem: 42,
            gpu: 28,
            fpsHistory: Array(20).fill(60),
            memHistory: Array(20).fill(42)
        };
        
        // 图表实例
        let fpsChart, memChart;
        
        // 初始化图表
        function initCharts() {
            const fpsCtx = document.getElementById('fps-chart').getContext('2d');
            fpsChart = new Chart(fpsCtx, {
                type: 'line',
                data: {
                    labels: Array(20).fill(''),
                    datasets: [{
                        label: 'FPS',
                        data: perfData.fpsHistory,
                        borderColor: '#00ff41',
                        backgroundColor: 'rgba(0, 255, 65, 0.1)',
                        borderWidth: 2,
                        pointRadius: 0,
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            min: 0,
                            max: 100,
                            display: false
                        },
                        x: {
                            display: false
                        }
                    },
                    animation: false
                }
            });
            
            const memCtx = document.getElementById('mem-chart').getContext('2d');
            memChart = new Chart(memCtx, {
                type: 'line',
                data: {
                    labels: Array(20).fill(''),
                    datasets: [{
                        label: 'Memory (MB)',
                        data: perfData.memHistory,
                        borderColor: '#008f11',
                        backgroundColor: 'rgba(0, 143, 17, 0.1)',
                        borderWidth: 2,
                        pointRadius: 0,
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            min: 0,
                            max: 100,
                            display: false
                        },
                        x: {
                            display: false
                        }
                    },
                    animation: false
                }
            });
        }
        
        // 更新性能监控面板
        function updatePerfMonitor() {
            document.getElementById('fps-value').textContent = perfData.fps;
            document.getElementById('fps-bar').style.width = Math.min(perfData.fps / 60 * 100, 100) + '%';
            
            document.getElementById('compact-fps').textContent = perfData.fps + ' FPS';
            
            document.getElementById('cpu-value').textContent = perfData.cpu + '%';
            document.getElementById('cpu-bar').style.width = perfData.cpu + '%';
            
            document.getElementById('mem-value').textContent = perfData.mem + 'MB';
            document.getElementById('mem-bar').style.width = (perfData.mem / 130 * 100) + '%';
            
            document.getElementById('gpu-value').textContent = perfData.gpu + '%';
            document.getElementById('gpu-bar').style.width = perfData.gpu + '%';
            
            // 更新图表数据
            perfData.fpsHistory.push(perfData.fps);
            perfData.fpsHistory.shift();
            
            perfData.memHistory.push(perfData.mem);
            perfData.memHistory.shift();
            
            if (fpsChart) {
                fpsChart.data.datasets[0].data = perfData.fpsHistory;
                fpsChart.update();
            }
            
            if (memChart) {
                memChart.data.datasets[0].data = perfData.memHistory;
                memChart.update();
            }
            
            // 模拟数据变化
            perfData.fps = Math.max(45, 60 - Math.random() * 10);
            perfData.cpu = 12 + Math.random() * 8;
            perfData.gpu = 25 + Math.random() * 8;
            perfData.mem = 40 + Math.random() * 10;
        }
        
        // 黑客帝国代码雨背景
        const canvas = document.getElementById('matrix-background');
        const ctx = canvas.getContext('2d');
        
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        const chars = "01010101011010010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101";
        const charArray = chars.split("");
        
        const fontSize = 14;
        const columns = canvas.width / fontSize;
        
        const drops = [];
        for (let i = 0; i < columns; i++) {
            drops[i] = Math.floor(Math.random() * canvas.height / fontSize);
        }
        
        // 优化后的绘制函数
        function drawMatrix() {
            // 使用半透明矩形创建拖尾效果
            ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = "#00ff41";
            ctx.font = `${fontSize}px 'Share Tech Mono'`;
            
            for (let i = 0; i < drops.length; i++) {
                const text = charArray[Math.floor(Math.random() * charArray.length)];
                
                // 只绘制可见区域内的字符
                const yPos = drops[i] * fontSize;
                if (yPos > 0 && yPos < canvas.height) {
                    ctx.fillText(text, i * fontSize, yPos);
                }
                
                if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    drops[i] = 0;
                }
                
                drops[i]++;
            }
        }
        
        // 创建3D地球（性能优化版本）
        function initEarth() {
            const container = document.getElementById('earth-container');
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ 
                alpha: true, 
                antialias: true,
                powerPreference: "high-performance"
            });
            
            renderer.setSize(container.clientWidth, container.clientHeight);
            container.appendChild(renderer.domElement);
            
            // 使用较低精度的几何体
            const geometry = new THREE.SphereGeometry(2, 32, 32);
            
            // 创建共享材质
            const material = new THREE.MeshPhongMaterial({
                color: 0x00ff41,
                emissive: 0x003300,
                specular: 0x00cc00,
                shininess: 20
            });
            
            const earth = new THREE.Mesh(geometry, material);
            scene.add(earth);
            
            // 添加网格线
            const wireframe = new THREE.WireframeGeometry(geometry);
            const line = new THREE.LineSegments(wireframe);
            line.material.color = new THREE.Color(0x00ff41);
            line.material.transparent = true;
            line.material.opacity = 0.3;
            scene.add(line);
            
            // 添加灯光
            const ambientLight = new THREE.AmbientLight(0x003300);
            scene.add(ambientLight);
            
            const sunLight = new THREE.DirectionalLight(0x00ff00, 1);
            sunLight.position.set(5, 3, 5);
            scene.add(sunLight);
            
            camera.position.z = 5;
            
            // 渲染循环
            let frameCount = 0;
            let lastTime = performance.now();
            
            function animate() {
                requestAnimationFrame(animate);
                
                const currentTime = performance.now();
                frameCount++;
                
                // 每秒钟更新一次FPS
                if (currentTime - lastTime >= 1000) {
                    perfData.fps = frameCount;
                    frameCount = 0;
                    lastTime = currentTime;
                }
                
                earth.rotation.y += 0.005;
                line.rotation.y += 0.005;
                
                renderer.render(scene, camera);
            }
            
            animate();
            
            // 响应窗口大小变化
            window.addEventListener('resize', () => {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });
        }

        // 页面加载完成后初始化
        window.addEventListener('DOMContentLoaded', () => {
            // 设置Canvas尺寸
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            // 启动矩阵背景动画
            setInterval(drawMatrix, 50);
            
            // 初始化3D地球
            initEarth();
            
            // 初始化图表
            initCharts();
            
            // 启动性能监控
            setInterval(updatePerfMonitor, 1000);
            
            // 性能监控面板切换功能
            const perfMonitor = document.querySelector('.perf-monitor');
            const perfToggle = document.querySelector('.perf-toggle');
            
            perfToggle.addEventListener('click', function(e) {
                e.stopPropagation();
                perfMonitor.classList.toggle('compact');
                perfToggle.textContent = perfMonitor.classList.contains('compact') ? '+' : '−';
            });
            
            // 导航栏活动状态
            const navLinks = document.querySelectorAll('.nav-links a');
            navLinks.forEach(link => {
                link.addEventListener('click', function() {
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
                });
            });
        });

        // 响应窗口大小变化
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    </script>
</body>
</html>